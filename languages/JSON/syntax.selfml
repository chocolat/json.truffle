(root source.json
    (include @value))

(collection number
    (zone constant.numeric.json
        (match
            (regex [(?x:         # turn on extended mode
			             -?         # an optional minus
			             (?:
			               0        # a zero
			               |        # ...or...
			               [1-9]    # a 1-9 character
			               \d*      # followed by zero or more digits
			             )
			             (?:
			               (?:
			                 \.     # a period
			                 \d+    # followed by one or more digits
			               )?
			               (?:
			                 [eE]   # an e character
			                 [+-]?  # followed by an option +/-
			                 \d+    # followed by one or more digits
			               )?       # make exponent optional
			             )?         # make decimal portion optional
			           )]))))

(collection object
    (zone meta.structure.dictionary.json
        (start
            (regex [\{]
                (0 punctuation.definition.dictionary.begin.json)))
        (end
            (regex [\}]
                (0 punctuation.definition.dictionary.end.json)))
        (subzones
            (include @string)
            (zone meta.structure.dictionary.value.json
                (start
                    (regex :
                        (0 punctuation.separator.dictionary.key-value.json)))
                (end
                    (regex [(,)|(?=\})]
                        (1 punctuation.separator.dictionary.pair.json)))
                (subzones
                    (include @value)
                    (zone invalid.illegal.expected-dictionary-separator.json
                        (match
                            (regex [[^\s,]])))))
            (zone invalid.illegal.expected-dictionary-separator.json
                (match
                    (regex [[^\s\}]]))))))

(collection string
    (zone string.quoted.double.json
        (start
            (regex "
                (0 punctuation.definition.string.begin.json)))
        (end
            (regex "
                (0 punctuation.definition.string.end.json)))
        (subzones
            (zone constant.character.escape.json
                (match
                    (regex [(?x:                # turn on extended mode
                     \\                # a literal backslash
                     (?:               # ...followed by...
                       ["\\/bfnrt]     # one of these characters
                       |               # ...or...
                       u               # a u
                       [0-9a-fA-F]{4}  # and four hex digits
                     )
                   )])))
            (zone invalid.illegal.unrecognized-string-escape.json
                (match
                    (regex \\.))))))

(collection constant
    (zone constant.language.json
        (match
            (regex [\b(?:true|false|null)\b]))))

(collection value
    (zone
        (subzones
            (include @constant)
            (include @number)
            (include @string)
            (include @array)
            (include @object))))

(collection array
    (zone meta.structure.array.json
        (start
            (regex `\[`
                (0 punctuation.definition.array.begin.json)))
        (end
            (regex `\]`
                (0 punctuation.definition.array.end.json)))
        (subzones
            (include @value)
            (zone punctuation.separator.array.json
                (match ,))
            (zone invalid.illegal.expected-array-separator.json
                (match
                    (regex `[^\s\]]`))))))